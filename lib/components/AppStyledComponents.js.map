{"version":3,"sources":["../../src/components/AppStyledComponents.tsx"],"names":["FONT_WEIGHT","APP_CONSTANTS","IS_ANDROID","FONT_SIZE","Fonts","size","small","medium","_Text","props","children","AppText","Colors","primaryText","textAlign","AppHeading","TransparentButtonsBorder","options","borderRadius","borderColor","lightBoxShadowGrey","AddElementShadow","shadowColor","charcoalDarkGrey","shadowOffset","shadowOpacity","shadowRadius","elevation","backgroundColor","white"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components/native';\nimport { propOr } from 'ramda';\nimport { Text } from 'react-native';\nimport { APP_CONSTANTS, Colors, Fonts } from '../commons';\n\nconst FONT_WEIGHT = APP_CONSTANTS.IS_ANDROID ? '400' : 'bold';\nconst FONT_SIZE = APP_CONSTANTS.IS_ANDROID ? Fonts.size.small : Fonts.size.medium;\n\nexport const _Text = (props) => (\n  <Text maxFontSizeMultiplier={1.1} {...props}>\n    {props.children}\n  </Text>\n);\n/*\n * TEXTS STYLED COMPONENTS\n */\ntype AppTextProps = {\n  color?: string; //Colors\n  paddingTop?: number; //pixels\n  paddingLeft?: number; //pixels\n  paddingRight?: number; //pixels\n  paddingBottom?: number; //pixels\n  marginTop?: number; //pixels\n  textAlign?: 'left' | 'right' | 'center';\n  fontWeight?: string;\n  fontSize?: string | number;\n  textDecorationLine?: string;\n  textTransform?: 'lowercase' | 'uppercase' | 'full-width' | 'inherit' | 'capitalize' | 'none';\n  width?: number | 'auto';\n  testID?: string;\n  accessibilityLabel?: string;\n};\nexport const AppText = styled(_Text)<AppTextProps>`\n  padding-top: ${(props) => propOr(0, 'paddingTop')(props)};\n  padding-left: ${(props) => propOr(0, 'paddingLeft')(props)};\n  padding-right: ${(props) => propOr(0, 'paddingRight')(props)};\n  padding-bottom: ${(props) => propOr(0, 'paddingBottom')(props)};\n  margin-top: ${(props) => propOr(0, 'marginTop')(props)};\n  font-size: ${(props) => propOr(FONT_SIZE, 'fontSize', props)};\n  font-family: TTCommons-Regular;\n  font-weight: ${(props) => propOr('300', 'fontWeight')(props)};\n  color: ${(props) => propOr(Colors.primaryText, 'color', props)};\n  text-decoration-line: ${(props) => propOr('none', 'textDecorationLine')(props)};\n  text-transform: ${(props) => propOr('none', 'textTransform', props)};\n  width: ${(props) => propOr('auto', 'width', props)};\n  ${(props) => (props.textAlign ? `text-align: ${props.textAlign}` : '')}\n`;\n\ntype AppHeading = {\n  color?: string; //Colors\n  paddingTop?: number;\n  paddingBottom?: number;\n  paddingRight?: number; //pixels\n  textTransform?: 'lowercase' | 'uppercase' | 'full-width' | 'inherit' | 'capitalize';\n  width?: number;\n  textDecorationLine?: string;\n  textAlign?: string;\n  fontSize?: number;\n  fontWeight?: number | string;\n  testID?: string;\n  accessibilityLabel?: string;\n};\n\nexport const AppHeading = styled(_Text)<AppHeading>`\n  padding-top: ${(props) => propOr(5, 'paddingTop', props)};\n  padding-bottom: ${(props) => propOr(0, 'paddingBottom', props)};\n  font-size: ${(props) => propOr(FONT_SIZE, 'fontSize', props)};\n  padding-right: ${(props) => propOr(0, 'paddingRight')(props)};\n  font-weight: ${(props) => propOr(FONT_WEIGHT, 'fontWeight')(props)};\n  font-family: TTCommons-DemiBold;\n  color: ${(props) => propOr(Colors.primaryText, 'color', props)};\n  text-transform: ${(props) => propOr('none', 'textTransform', props)};\n  text-decoration-line: ${(props) => propOr('none', 'textDecorationLine')(props)};\n  text-align: ${(props) => propOr('left', 'textAlign', props)};\n  width: ${(props) => propOr('auto', 'width', props)};\n`;\n\ntype TransparentButtonsBorderType = {\n  borderRadius?: number;\n  borderColor?: string;\n};\n\nexport const TransparentButtonsBorder = (options?: TransparentButtonsBorderType) => {\n  const { borderRadius = 4, borderColor = Colors.lightBoxShadowGrey } = options || {};\n  return `\n  border-right-width: 1;\n  border-left-width: 1;\n  border-bottom-width: 1;\n  border-top-width: 0.25;\n  border-radius: ${borderRadius};\n  border-color: ${borderColor}`;\n};\n\n/* \n  ELEMENT SHADOW\n*/\ntype AddElementShadowType = {\n  shadowColor?: string;\n  backgroundColor?: string;\n  shadowOffset?: string;\n  shadowOpacity?: number;\n  shadowRadius?: number;\n  elevation?: number;\n};\nexport const AddElementShadow = (options?: AddElementShadowType): string => {\n  const { shadowColor = Colors.charcoalDarkGrey, shadowOffset = '0px 2px', shadowOpacity = 0.4, shadowRadius = 1, elevation = 2, backgroundColor = Colors.white } = options || {};\n  return `\n    background-color: ${backgroundColor};\n    shadow-color: ${shadowColor};\n    shadow-offset: ${shadowOffset};\n    shadow-opacity: ${shadowOpacity};\n    shadow-radius: ${shadowRadius};\n    elevation: ${elevation};\n  `;\n};\n"],"file":"AppStyledComponents.js"}