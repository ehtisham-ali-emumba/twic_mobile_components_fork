{"version":3,"sources":["../../src/components/Picker.tsx"],"names":["isEmptyOrNil","Utilities","PickerIcon","props","color","iconTop","pickerStyle","APP_CONSTANTS","IS_ANDROID","position","top","right","Metrics","smallMargin","Fonts","size","tiny","extraSmall","PICKER_THEME","fonts","medium","fontFamily","roundness","baseMargin","Picker","React","useState","pickerColor","Colors","newDimGrey","text","newCharcoalDarkGrey","icon","charcoalLightGrey","colors","setColors","textInputRef","useRef","placeholderText","value","errorMessage","pickerMode","customErrorContainerStyle","customInputStyle","onValueChange","onDonePress","onOpenHandler","items","testId","RenderCustomIcon","pickerIOSContainer","pickerAndroidContainer","hidePlaceholder","label","textInputContainerStyle","textProps","isDisabled","pickerStateColor","newDisabled","error","textColor","disabledText","iconColor","pickerMarginTop","doubleBaseMargin","onOpenSelect","current","handleFocus","newBlue","onCloseSelect","handleBlur","PickerOSSpecificProps","pickerProps","onFocus","onBlur","dropdownIconColor","dropdownIconRippleColor","onClose","onOpen","primary","blue","disabled","placeholder","black","backgroundColor","white","pickerStyles","inputIOSContainer","marginTop","height","inputAndroidContainer","length","fontSize","regular","maxFontSizeMultiplier","width","small","StyleSheet","create","iconContainer","justifyContent","marginRight","inputIOS","paddingHorizontal","textAlignVertical","paddingRight","inputAndroid","marginLeft"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp } from 'react-native';\nimport RNPickerSelect from 'react-native-picker-select';\nimport { TextInput } from 'react-native-paper';\nimport { If, Then } from 'react-if';\nimport Icon from 'react-native-vector-icons/AntDesign';\n\nimport { APP_CONSTANTS, Colors, Fonts, Metrics, Utilities } from '../commons';\n\nconst { isEmptyOrNil } = Utilities;\n\nimport { AppText } from './AppStyledComponents';\n\nexport const PickerIcon = (props) => {\n  const { color, iconTop } = props;\n  const pickerStyle: StyleProp<any> = APP_CONSTANTS.IS_ANDROID\n    ? {\n        position: 'absolute',\n        top: iconTop,\n        right: Metrics.smallMargin,\n        color: color,\n      }\n    : { color: color, right: 2 };\n\n  return <Icon name=\"caretdown\" style={pickerStyle} size={APP_CONSTANTS.IS_ANDROID ? Fonts.size.tiny : Fonts.size.extraSmall} color={color} />;\n};\n\nconst PICKER_THEME = {\n  fonts: {\n    medium: {\n      fontFamily: 'TTCommons-Regular',\n    },\n  },\n  roundness: Metrics.baseMargin,\n};\n\nexport type PickerProps = {\n  label: string;\n  placeholderText?: string;\n  value: string;\n  pickerMode?: 'flat' | 'outlined' | undefined;\n  onValueChange(value: any): void;\n  onDonePress?(): void;\n  onOpenHandler?(): void;\n  items: Array<any>;\n  errorMessage?: string;\n  customInputStyle?: object;\n  pickerIOSContainer?: object;\n  pickerAndroidContainer?: object;\n  customErrorContainerStyle?: object;\n  textInputContainerStyle?: object;\n  RenderCustomIcon?(): React.ReactElement;\n  testId?: string;\n  hidePlaceholder?: boolean;\n  textProps?: object;\n};\n\nexport const Picker = (props: PickerProps) => {\n  const [colors, setColors] = React.useState({ pickerColor: Colors.newDimGrey, text: Colors.newCharcoalDarkGrey, icon: Colors.charcoalLightGrey });\n\n  const textInputRef = React.useRef<any>(null);\n\n  // const pickerRef = React.useRef<any>(null);\n  const {\n    placeholderText,\n    value,\n    errorMessage = '',\n    pickerMode = 'outlined',\n    customErrorContainerStyle = {},\n    customInputStyle = {},\n    onValueChange,\n    onDonePress,\n    onOpenHandler = () => {},\n    items,\n    testId = '',\n    RenderCustomIcon,\n    pickerIOSContainer = {},\n    pickerAndroidContainer = {},\n    hidePlaceholder = false,\n    label = '',\n    textInputContainerStyle = {},\n    textProps = {},\n  } = props;\n\n  const isDisabled = isEmptyOrNil(items);\n  // sets the color for the drop down\n  const pickerStateColor = isDisabled ? Colors.newDisabled : isEmptyOrNil(errorMessage) ? colors.pickerColor : Colors.error;\n  const textColor = isDisabled ? Colors.disabledText : isEmptyOrNil(errorMessage) ? colors.text : Colors.error;\n  const iconColor = isDisabled ? Colors.disabledText : colors.icon;\n  const pickerMarginTop = pickerMode === 'flat' ? Metrics.doubleBaseMargin : 3;\n\n  const onOpenSelect = () => {\n    textInputRef.current.handleFocus();\n    setColors({ ...colors, pickerColor: Colors.newBlue, icon: Colors.newBlue });\n    if (!APP_CONSTANTS.IS_ANDROID) {\n      onOpenHandler();\n    }\n  };\n\n  const onCloseSelect = () => {\n    textInputRef.current.handleBlur();\n    setColors({ ...colors, pickerColor: Colors.newDimGrey, icon: Colors.charcoalLightGrey });\n  };\n\n  // Specifically used for different platforms (IOS and Android)\n  const PickerOSSpecificProps = APP_CONSTANTS.IS_ANDROID\n    ? {\n        pickerProps: {\n          onFocus: () => onOpenSelect(),\n          onBlur: () => onCloseSelect(),\n          dropdownIconColor: '#ffffff',\n          dropdownIconRippleColor: '#ffffff',\n        },\n      }\n    : {\n        onClose: () => onCloseSelect(),\n        onOpen: () => onOpenSelect(),\n      };\n\n  // const onUpdownArrowSelect = (key?) => {\n  //   const picker = pickerRef.current;\n  //   const pickerItems = picker.state.items;\n  //   const pickerSelectedValue = picker.state.selectedItem.value;\n  //   const pickerSelectedValueIndex = findIndex(propEq('value', pickerSelectedValue), pickerItems);\n  //   if (key === 'up') {\n  //     if (pickerSelectedValueIndex > 0) picker.onValueChange(pickerItems[pickerSelectedValueIndex - 1].value, pickerSelectedValueIndex - 1);\n  //     if (pickerSelectedValueIndex === 0) picker.onValueChange(pickerItems[pickerItems.length - 1].value, pickerItems.length - 1);\n  //   } else {\n  //     if (pickerSelectedValueIndex + 1 < pickerItems.length) picker.onValueChange(pickerItems[pickerSelectedValueIndex + 1].value, pickerSelectedValueIndex + 1);\n  //     if (pickerSelectedValueIndex + 1 === pickerItems.length) picker.onValueChange(pickerItems[0].value, 0);\n  //   }\n  // };\n\n  return (\n    <>\n      <TextInput\n        ref={textInputRef}\n        theme={{\n          ...PICKER_THEME,\n          colors: {\n            primary: Colors.blue,\n            error: Colors.error,\n            disabled: Colors.disabled,\n            placeholder: pickerStateColor,\n            text: Colors.black,\n          },\n        }}\n        style={{ backgroundColor: Colors.white, ...textInputContainerStyle }}\n        mode={pickerMode}\n        label={!isEmptyOrNil(value) ? label : ''}\n        value={!isEmptyOrNil(value) ? value : ''}\n        error={!isEmptyOrNil(errorMessage) ? true : false}\n        underlineColor={pickerStateColor}\n        underlineColorAndroid={pickerStateColor}\n        textAlign=\"auto\"\n        render={() => (\n          <RNPickerSelect\n            style={{\n              placeholder: {\n                color: isEmptyOrNil(errorMessage) ? pickerStateColor : Colors.error,\n              },\n              ...pickerStyles,\n              inputIOSContainer: {\n                marginTop: pickerMarginTop,\n                height: 50,\n                ...pickerIOSContainer,\n              },\n              inputAndroidContainer: {\n                marginTop: pickerMarginTop,\n                height: 50,\n                ...pickerAndroidContainer,\n              },\n            }}\n            placeholder={\n              hidePlaceholder\n                ? {}\n                : {\n                    label: `${placeholderText}`,\n                    value: null,\n                  }\n            }\n            key={items.length}\n            // ref={pickerRef}\n            textInputProps={{\n              //@ts-ignore\n              fontSize: Fonts.size.regular - 1,\n              fontFamily: 'TTCommons-Regular',\n              maxFontSizeMultiplier: 1.1,\n              width: '95%',\n              color: textColor,\n              marginTop: -3,\n              ...customInputStyle,\n            }}\n            Icon={() => (RenderCustomIcon ? RenderCustomIcon() : <PickerIcon color={isEmptyOrNil(errorMessage) ? iconColor : Colors.error} />)}\n            // useNativeAndroidPickerStyle={false}\n            itemKey={value}\n            // onUpArrow={() => onUpdownArrowSelect('up')}\n            // onDownArrow={() => onUpdownArrowSelect()}\n            onValueChange={onValueChange}\n            onDonePress={onDonePress}\n            items={items}\n            disabled={isDisabled}\n            testID={testId}\n            accessibilityLabel={testId}\n            {...PickerOSSpecificProps}\n          />\n        )}\n        {...textProps}\n      />\n      <If condition={!isDisabled && !isEmptyOrNil(errorMessage)}>\n        <Then>\n          <View\n            style={{\n              ...customErrorContainerStyle,\n            }}\n          >\n            <AppText color={Colors.error} fontSize={Fonts.size.small} testID={`${testId}-error`} accessibilityLabel={`${testId}-error`}>\n              {errorMessage}\n            </AppText>\n          </View>\n        </Then>\n      </If>\n    </>\n  );\n};\n\nconst pickerStyles = StyleSheet.create({\n  iconContainer: {\n    justifyContent: 'center',\n    height: '100%',\n    marginRight: 15,\n  },\n  inputIOS: {\n    fontSize: 16,\n    height: 56,\n    paddingHorizontal: 14,\n    textAlignVertical: 'center',\n    color: Colors.black,\n    width: '100%',\n    paddingRight: 30, // to ensure the text is never behind the icon\n  },\n  inputAndroid: {\n    fontSize: 16,\n    height: 56,\n    paddingHorizontal: 14,\n    color: Colors.black,\n    textAlignVertical: 'center',\n    width: '100%',\n    paddingRight: 30, // to ensure the text is never behind the icon\n    marginLeft: 5,\n  },\n});\n"],"file":"Picker.js"}