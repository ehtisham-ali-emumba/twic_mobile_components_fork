{"version":3,"sources":["../../src/components/PrimaryButton.tsx"],"names":["buttonWidth","Metrics","screenWidth","screenHorizontalPadding","smallButtonWidth","ButtonContainer","View","props","fullWidth","section","smallMargin","baseMargin","Colors","primary","ButtonLabel","_Text","Fonts","size","medium","white","Platform","OS","ButtonIcon","EvilIcon","h1","ButtonLoaderIcon","PrimaryButton","buttonLabel","customIcon","width","onClickHandler","disabled","loading","buttonColor","buttonShadowColor","buttonStyle","labelStyle","shadowOptions","shadowContainerStyle","testId","disabledColor","ButtonContent","Boolean","APP_CONSTANTS","PRIMARY_BUTTON_SHADOW","shadowColor","backgroundColor","borderBottomColor","bottom","shadowOffset","shadowOpacity","shadowRadius","elevation","borderRadius","alignItems","alignSelf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform } from 'react-native';\nimport styled from 'styled-components/native';\nimport EvilIcon from 'react-native-vector-icons/EvilIcons';\nimport * as Animatable from 'react-native-animatable';\nimport { If } from 'react-if';\nimport { propOr, prop } from 'ramda';\n\nimport { APP_CONSTANTS, Colors, Fonts, Metrics } from '../commons';\nimport { _Text } from './AppStyledComponents';\nimport BoxShadow from './BoxShadow';\n\nconst buttonWidth = Metrics.screenWidth - Metrics.screenHorizontalPadding * 2;\nconst smallButtonWidth = buttonWidth / 2;\ninterface ButtonContainerType {\n  fullWidth?: boolean;\n  buttonColor?: string;\n  width?: number | 'auto' | string;\n  buttonShadowColor?: string;\n}\n\nconst ButtonContainer = styled(View)<ButtonContainerType>`\n  width: ${(props) => (props.fullWidth ? buttonWidth : prop('width', props))};\n  height: ${Metrics.section * 2 + Metrics.smallMargin};\n  padding-horizontal: ${Metrics.baseMargin + 2};\n  padding-vertical: ${Metrics.baseMargin + 2};\n  border-radius: ${Metrics.baseMargin};\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  background-color: ${(props) => propOr(Colors.primary, 'buttonColor', props)};\n`;\ninterface ButtonLabelType {\n  buttonLabelColor?: string;\n}\n\nconst ButtonLabel = styled(_Text)<ButtonLabelType>`\n  font-size: ${Fonts.size.medium};\n  color: ${(props) => propOr(Colors.white, 'buttonLabelColor', props)};\n  font-family: TTCommons-DemiBold;\n  font-weight: ${Platform.OS === 'android' ? '400' : 'bold'};\n  text-align: center;\n`;\n\nconst ButtonIcon = styled(EvilIcon)`\n  font-size: ${Fonts.size.h1};\n  color: ${Colors.white};\n  font-weight: bold;\n  text-align: center;\n`;\nconst ButtonLoaderIcon = () => (\n  <Animatable.View iterationCount={'infinite'} animation=\"rotate\">\n    <ButtonIcon name=\"spinner-3\" />\n  </Animatable.View>\n);\n\nexport interface PrimaryButtonType {\n  buttonLabel: string;\n  buttonColor?: string;\n  buttonShadowColor?: string;\n  fullWidth?: boolean;\n  width?: number | 'auto' | string;\n  activeOpacity?: number;\n  onClickHandler(): void;\n  disabled?: boolean;\n  loading?: boolean;\n  buttonStyle?: object;\n  labelStyle?: object;\n  shadowOptions?: object;\n  shadowContainerStyle?: object;\n  customIcon?: () => any;\n  testId?: string;\n  disabledColor?: string;\n}\nexport const PrimaryButton = (props: PrimaryButtonType) => {\n  const {\n    buttonLabel = 'Save',\n    customIcon = () => {},\n    fullWidth = false,\n    width = smallButtonWidth,\n    onClickHandler,\n    disabled = false,\n    loading = false,\n    buttonColor = Colors.primary,\n    buttonShadowColor,\n    buttonStyle,\n    labelStyle,\n    shadowOptions = {},\n    shadowContainerStyle = {},\n    testId = '',\n    disabledColor = Colors.disabled,\n  } = props;\n\n  const ButtonContent = () => {\n    return (\n      <ButtonContainer fullWidth={fullWidth} width={width} buttonColor={disabled ? disabledColor : buttonColor} buttonShadowColor={buttonShadowColor || buttonColor} style={buttonStyle}>\n        <If condition={Boolean(customIcon)}>{customIcon()}</If>\n        <If condition={loading}>\n          <ButtonLoaderIcon />\n        </If>\n        <If condition={!loading}>\n          <ButtonLabel style={labelStyle}>{buttonLabel}</ButtonLabel>\n        </If>\n      </ButtonContainer>\n    );\n  };\n\n  return (\n    <View testID={disabled ? `${testId}-disabled` : testId} accessibilityLabel={disabled ? `${testId}-disabled` : testId}>\n      <BoxShadow\n        shadowOptions={{\n          ...APP_CONSTANTS.PRIMARY_BUTTON_SHADOW,\n          shadowColor: disabled ? disabledColor : buttonColor,\n          backgroundColor: buttonColor,\n          borderBottomColor: buttonColor,\n          bottom: 4,\n          ...shadowOptions,\n        }}\n        contentWrapperStyle={{\n          shadowColor: disabled ? disabledColor : buttonColor,\n          shadowOffset: '0px 2px',\n          shadowOpacity: 0.75,\n          shadowRadius: 2,\n          elevation: 2,\n          backgroundColor: disabled ? disabledColor : buttonColor,\n          borderRadius: 10,\n          alignItems: 'flex-end',\n        }}\n        otherOptions={{\n          alignSelf: 'center',\n        }}\n        shadowContainerStyle={shadowContainerStyle}\n        onPress={onClickHandler}\n        disabled={disabled}\n      >\n        <ButtonContent />\n      </BoxShadow>\n    </View>\n  );\n};\n"],"file":"PrimaryButton.js"}